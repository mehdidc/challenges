{"stats": {"stats": [null, null, null, null, null], "train": {"avg_auc": [0.9990322580356327, 0.9989998893609586, 0.9990079406762463, 0.999039730229507, 0.9990432308181553], "time": [16.90348219871521, 17.111395359039307, 16.932849645614624, 17.462552070617676, 17.131357431411743]}, "test": {"avg_auc": 0.9721537041045779, "time": 91.30854082107544}, "valid": {"avg_auc": [0.9660347044285106, 0.9678003881579226, 0.970948700211232, 0.9587442346705236, 0.9641259696319774], "time": [9.10877013206482, 9.198817729949951, 9.129669666290283, 8.970086574554443, 9.111160516738892]}, "train_full": {"avg_auc": 0.9986988122515984}}, "summary": "dc7678b26eeb7b6cc035af801023cdef", "life": [{"dt": "Sun Feb 25 16:48:13 2018", "state": "success"}], "content": {"problem": "challenges.toxicity.problem", "info": {"max_depth": 61, "n_estimators": 200}, "sampler": "challenges.toxicity.samplers.tfidf", "codes": {"classifier": "\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.pipeline import make_pipeline\n\nclass Classifier:\n\n    def __init__(self):\n        self.clf = make_pipeline(\n            TfidfVectorizer(),\n            RandomForestClassifier(max_depth=61, n_estimators=200, n_jobs=-1),\n        )\n    \n    def fit(self, X, y):\n        self.clf.fit(X, y)\n    \n    def predict(self, X):\n        return self.clf.predict(X)\n\n    def predict_proba(self, X):\n        return self.clf.predict_proba(X)\n"}}, "traceback": "", "problem": "challenges.toxicity.problem", "duration": 223.437838, "sampler": "challenges.toxicity.samplers.tfidf", "end": "2018-02-25 16:48:12.931096", "start": "2018-02-25 16:44:29.493258", "state": "success"}