{"sampler": "challenges.toxicity.samplers.tfidf", "life": [{"dt": "Sun Feb 25 15:03:37 2018", "state": "success"}], "duration": 177.862429, "traceback": "", "end": "2018-02-25 15:03:36.653509", "state": "success", "stats": {"test": {"time": 91.11124181747437, "avg_auc": 0.964027737438704}, "train": {"time": [7.86487340927124, 7.863702297210693, 7.98040771484375, 7.911012887954712, 7.993079423904419], "avg_auc": [0.9802097893255238, 0.9811563365071936, 0.9810910276969499, 0.9814592074191649, 0.9812171270544486]}, "valid": {"time": [9.081079721450806, 9.22964334487915, 9.240293741226196, 9.309427261352539, 9.209710121154785], "avg_auc": [0.9569559889042302, 0.9532468542047315, 0.9509637838806803, 0.9560067377225181, 0.9581443067417198]}, "train_full": {"avg_auc": 0.984389383035959}, "stats": [null, null, null, null, null]}, "summary": "63695317c06d6dce4067237858c5ab55", "content": {"problem": "challenges.toxicity.problem", "codes": {"classifier": "\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.pipeline import make_pipeline\n\nclass Classifier:\n\n    def __init__(self):\n        self.clf = make_pipeline(\n            TfidfVectorizer(),\n            RandomForestClassifier(max_depth=13, n_estimators=200, n_jobs=-1),\n        )\n    \n    def fit(self, X, y):\n        self.clf.fit(X, y)\n    \n    def predict(self, X):\n        return self.clf.predict(X)\n\n    def predict_proba(self, X):\n        return self.clf.predict_proba(X)\n"}, "info": {"n_estimators": 200, "max_depth": 13}, "sampler": "challenges.toxicity.samplers.tfidf"}, "start": "2018-02-25 15:00:38.791080", "problem": "challenges.toxicity.problem"}