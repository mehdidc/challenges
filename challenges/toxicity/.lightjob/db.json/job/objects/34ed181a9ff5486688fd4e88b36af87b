{"life": [{"dt": "Mon Feb 26 17:37:19 2018", "state": "success"}], "content": {"info": {"batch_size": 64, "lr": 0.001, "nb_units": 100, "epochs": 10}, "sampler": "challenges.toxicity.samplers.gru", "codes": {"classifier": "import numpy as np\nimport re\nimport uuid\nfrom sklearn.metrics import roc_auc_score\nfrom gensim.models.wrappers import FastText\nfrom keras.layers import *\nfrom keras.optimizers import Adam\nfrom keras.models import Model\n\nft = FastText.load_fasttext_format('wiki.en.bin')\n#ft = None\nmax_length = 100\nnb_outputs = 6\nvec_size = 300\nbatch_size = 64\n\n\ndef normalize(s):\n    \"\"\"\n    Given a text, cleans and normalizes it. Feel free to add your own stuff.\n    \"\"\"\n    s = s.lower()\n    # Replace ips\n    # Isolate punctuation\n    s = re.sub(r'([\\'\\\"\\.\\(\\)\\!\\?\\-\\\\\\/\\,])', r' \\1 ', s)\n    # Remove some special characters\n    s = re.sub(r'([\\;\\:\\|•«\\n])', ' ', s)\n    # Replace numbers and symbols with language\n    s = s.replace('&', ' and ')\n    s = s.replace('@', ' at ')\n    s = s.replace('0', ' zero ')\n    s = s.replace('1', ' one ')\n    s = s.replace('2', ' two ')\n    s = s.replace('3', ' three ')\n    s = s.replace('4', ' four ')\n    s = s.replace('5', ' five ')\n    s = s.replace('6', ' six ')\n    s = s.replace('7', ' seven ')\n    s = s.replace('8', ' eight ')\n    s = s.replace('9', ' nine ')\n    return s\n\n\ndef fe(doc):\n    s = doc\n    s = normalize(s)\n    s = s.split(' ')\n    s = s[0:max_length]\n    s = [a.strip() for a in s]\n    s = [a for a in s if a in ft]\n    x = np.zeros((max_length, vec_size))\n    x[0:len(s)] = np.array([ft[a] for a in s])\n    return x\n\ndef avg_auc(clf, X, y):\n    aucs = []\n    y_pred = clf.predict_proba(X)\n    for i in range(y.shape[1]):\n        aucs.append(roc_auc_score(y[:, i], y_pred[i][:, 1]))\n    return np.mean(aucs)\n\n\nclass Classifier:\n\n    def __init__(self):\n        pass\n\n    def fit(self, X, y):\n        inp = Input(shape=(max_length, vec_size))\n        x = GRU(100)(inp)\n        out = Dense(nb_outputs, activation='sigmoid')(x)\n        model = Model(inputs=inp, outputs=out)\n        opt = Adam(lr=0.001)\n        model.compile(loss='binary_crossentropy', optimizer=opt)\n        self.model = model\n        def gen():\n            while True:\n                for i in range(0, len(X), batch_size):\n                    xb = X[i:i+batch_size]\n                    yb = y[i:i+batch_size]\n                    xb = [fe(s) for s in xb]\n                    xb = np.array(xb)\n                    yield xb, yb\n                #auc = avg_auc(self, X, y)\n                #print('Train auc : ' + str(auc))\n\n        steps_per_epoch = len(X) // batch_size\n        model.fit_generator(gen(), steps_per_epoch=steps_per_epoch, epochs=10)\n        id_ = str(uuid.uuid4())\n        filename = '.cache/gru' + id_ + '.h5'\n        print('Saving the mode into ' + filename)\n        self.model.save(filename)\n    \n    def predict(self, X):\n        pr = self.predict_proba(X)\n        pr = np.array(pr)#6,ex,2\n        pr = pr.transpose((1, 0, 2))\n        pr = pr[:, :, 1]\n        return (pr > 0.5).astype('float32')\n\n    def predict_proba(self, X):\n        yl = []\n        for i in range(0, len(X), batch_size):\n            xb = X[i:i + batch_size]\n            xb = [fe(x) for x in xb]\n            xb = np.array(xb)\n            y = self.model.predict(xb)\n            yl.append(y)\n        y = np.concatenate(yl, axis=0)\n        out = []\n        for i in range(y.shape[1]):\n            o = np.vstack((1 - y[:, i], y[:, i])).T\n            out.append(o)\n        return out\n"}, "problem": "challenges.toxicity.problem"}, "stats": {"train_full": {"avg_auc": 0.9965005215467474}, "train": {"time": [1664.5960357189178, 1708.9488382339478, 1666.621515750885, 1700.4214193820953, 1630.163024187088], "avg_auc": [0.9957291891711791, 0.9952177940621211, 0.9952404999712233, 0.9962557063250536, 0.996032713244983]}, "test": {"time": 1504.010972738266, "avg_auc": 0.9851082264144363}, "stats": [null, null, null, null, null], "valid": {"time": [150.7764973640442, 151.27787351608276, 150.87452578544617, 150.77862215042114, 150.63045835494995], "avg_auc": [0.9835695637190712, 0.98218360741005, 0.983320626885842, 0.979737834347702, 0.9747136053339843]}}, "problem": "challenges.toxicity.problem", "end": "2018-02-26 17:37:18.241263", "sampler": "challenges.toxicity.samplers.gru", "start": "2018-02-26 14:25:13.794514", "state": "success", "duration": 11524.446749, "traceback": "", "summary": "7e54b707cdcb1820aa802354aff2d8d9"}