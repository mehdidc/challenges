{"state": "success", "life": [{"dt": "Sun Feb 25 16:59:24 2018", "state": "success"}], "start": "2018-02-25 16:56:09.862740", "summary": "04a2c56647a23bf695dd35df84f76659", "stats": {"train": {"time": [10.798376321792603, 11.132625341415405, 11.230263710021973, 11.21101450920105, 11.081423044204712], "avg_auc": [0.9959024885653703, 0.9956242309044065, 0.9953020640507796, 0.9952681434132393, 0.9955791787874931]}, "valid": {"time": [9.12997579574585, 9.360511064529419, 9.151112794876099, 9.289885520935059, 9.31994104385376], "avg_auc": [0.9611573080650442, 0.9654700949828747, 0.960746392191718, 0.967277697272073, 0.966610520874814]}, "train_full": {"avg_auc": 0.9953555540943245}, "test": {"time": 91.23029136657715, "avg_auc": 0.968032928851259}, "stats": [null, null, null, null, null]}, "duration": 194.011083, "sampler": "challenges.toxicity.samplers.tfidf", "problem": "challenges.toxicity.problem", "content": {"codes": {"classifier": "\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.pipeline import make_pipeline\n\nclass Classifier:\n\n    def __init__(self):\n        self.clf = make_pipeline(\n            TfidfVectorizer(),\n            RandomForestClassifier(max_depth=34, n_estimators=200, n_jobs=-1),\n        )\n    \n    def fit(self, X, y):\n        self.clf.fit(X, y)\n    \n    def predict(self, X):\n        return self.clf.predict(X)\n\n    def predict_proba(self, X):\n        return self.clf.predict_proba(X)\n"}, "sampler": "challenges.toxicity.samplers.tfidf", "info": {"max_depth": 34, "n_estimators": 200}, "problem": "challenges.toxicity.problem"}, "traceback": "", "end": "2018-02-25 16:59:23.873823"}