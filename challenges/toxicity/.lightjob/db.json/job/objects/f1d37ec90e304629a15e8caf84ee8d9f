{"start": "2018-02-25 15:47:44.130442", "life": [{"state": "success", "dt": "Sun Feb 25 15:51:56 2018"}], "problem": "challenges.toxicity.problem", "state": "success", "sampler": "challenges.toxicity.samplers.tfidf", "duration": 251.442642, "stats": {"train": {"avg_auc": [0.9995986724831277, 0.9996077229487573, 0.9996069061923575, 0.9996291214042715, 0.9996649742206695], "time": [22.513742923736572, 22.4936044216156, 22.51368474960327, 23.063334941864014, 22.511483192443848]}, "train_full": {"avg_auc": 0.9994281119916494}, "test": {"avg_auc": 0.973628378472777, "time": 91.00009179115295}, "valid": {"avg_auc": [0.9682566590080413, 0.9760204967699454, 0.9664045188438307, 0.9654005394200634, 0.9660968095786361], "time": [9.250008344650269, 9.148990154266357, 9.329127550125122, 9.29988145828247, 9.229358911514282]}, "stats": [null, null, null, null, null]}, "end": "2018-02-25 15:51:55.573084", "content": {"codes": {"classifier": "\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.pipeline import make_pipeline\n\nclass Classifier:\n\n    def __init__(self):\n        self.clf = make_pipeline(\n            TfidfVectorizer(),\n            RandomForestClassifier(max_depth=87, n_estimators=200, n_jobs=-1),\n        )\n    \n    def fit(self, X, y):\n        self.clf.fit(X, y)\n    \n    def predict(self, X):\n        return self.clf.predict(X)\n\n    def predict_proba(self, X):\n        return self.clf.predict_proba(X)\n"}, "problem": "challenges.toxicity.problem", "sampler": "challenges.toxicity.samplers.tfidf", "info": {"n_estimators": 200, "max_depth": 87}}, "summary": "d943ebfc005d8a4d6b0da03eb590b20f", "traceback": ""}