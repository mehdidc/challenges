{"stats": {"test": {"avg_auc": 0.9735298597468733, "time": 93.17094492912292}, "valid": {"avg_auc": [0.9609596692694172, 0.9609170654026952, 0.9717998449566213, 0.9685459897815779, 0.9661166033562757], "time": [9.429304361343384, 9.170839071273804, 9.310651302337646, 9.559509038925171, 9.330397605895996]}, "train": {"avg_auc": [0.9993643960464925, 0.999429098650416, 0.9993543464492403, 0.9993882880073635, 0.9993840478865424], "time": [19.555267095565796, 19.5524959564209, 19.392236471176147, 19.56116795539856, 19.312018394470215]}, "train_full": {"avg_auc": 0.9991168706938405}, "stats": [null, null, null, null, null]}, "content": {"codes": {"classifier": "\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.pipeline import make_pipeline\n\nclass Classifier:\n\n    def __init__(self):\n        self.clf = make_pipeline(\n            TfidfVectorizer(),\n            RandomForestClassifier(max_depth=74, n_estimators=200, n_jobs=-1),\n        )\n    \n    def fit(self, X, y):\n        self.clf.fit(X, y)\n    \n    def predict(self, X):\n        return self.clf.predict(X)\n\n    def predict_proba(self, X):\n        return self.clf.predict_proba(X)\n"}, "problem": "challenges.toxicity.problem", "sampler": "challenges.toxicity.samplers.tfidf", "info": {"max_depth": 74, "n_estimators": 200}}, "traceback": "", "start": "2018-02-25 14:25:40.940286", "life": [{"state": "success", "dt": "Sun Feb 25 14:29:39 2018"}], "duration": 238.421427, "problem": "challenges.toxicity.problem", "sampler": "challenges.toxicity.samplers.tfidf", "summary": "94bcbc3e373e4ea739c0cd657a5263ff", "end": "2018-02-25 14:29:39.361713", "state": "success"}