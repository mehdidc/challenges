{"stats": {"stats": [null, null, null, null, null], "train": {"time": [15.549952507019043, 16.018919944763184, 15.84160828590393, 15.652350187301636, 16.002262353897095], "avg_auc": [0.9986124533885827, 0.9988301690252435, 0.9988387777613318, 0.9986664352647633, 0.9988318559614897]}, "train_full": {"avg_auc": 0.9984431383239093}, "valid": {"time": [9.100247383117676, 9.31162691116333, 9.030893325805664, 9.11039400100708, 9.160665512084961], "avg_auc": [0.9711035834543541, 0.9604849175205549, 0.9571674072007337, 0.9657955854506192, 0.9657283786498115]}, "test": {"time": 90.67142724990845, "avg_auc": 0.9723035744619238}}, "sampler": "challenges.toxicity.samplers.tfidf", "end": "2018-02-25 17:17:22.513817", "life": [{"dt": "Sun Feb 25 17:17:23 2018", "state": "success"}], "problem": "challenges.toxicity.problem", "duration": 216.541258, "traceback": "", "content": {"sampler": "challenges.toxicity.samplers.tfidf", "codes": {"classifier": "\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.pipeline import make_pipeline\n\nclass Classifier:\n\n    def __init__(self):\n        self.clf = make_pipeline(\n            TfidfVectorizer(),\n            RandomForestClassifier(max_depth=58, n_estimators=200, n_jobs=-1),\n        )\n    \n    def fit(self, X, y):\n        self.clf.fit(X, y)\n    \n    def predict(self, X):\n        return self.clf.predict(X)\n\n    def predict_proba(self, X):\n        return self.clf.predict_proba(X)\n"}, "problem": "challenges.toxicity.problem", "info": {"n_estimators": 200, "max_depth": 58}}, "start": "2018-02-25 17:13:45.972559", "summary": "80d6675442707de25a5693323dc0a944", "state": "success"}