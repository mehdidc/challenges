{"sampler": "challenges.toxicity.samplers.tfidf", "traceback": "", "end": "2018-02-25 16:53:55.832982", "start": "2018-02-25 16:50:30.915134", "summary": "3b73252d2c30bf9ed695fdd36b7309eb", "stats": {"valid": {"time": [10.058642625808716, 10.348094940185547, 10.230212688446045, 10.200099229812622, 10.228211164474487], "avg_auc": [0.9573393672239101, 0.967449591324692, 0.9585528676689878, 0.9586994496276838, 0.9621202697768959]}, "train_full": {"avg_auc": 0.9928550204612879}, "train": {"time": [10.2915198802948, 10.364935159683228, 10.581100225448608, 10.510672330856323, 10.39499807357788], "avg_auc": [0.9924392568492921, 0.9927757772286069, 0.9924248556755737, 0.9929871149751358, 0.9926757437057544]}, "test": {"time": 100.6392891407013, "avg_auc": 0.9677876497001806}, "stats": [null, null, null, null, null]}, "content": {"sampler": "challenges.toxicity.samplers.tfidf", "problem": "challenges.toxicity.problem", "info": {"n_estimators": 200, "max_depth": 26}, "codes": {"classifier": "\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.pipeline import make_pipeline\n\nclass Classifier:\n\n    def __init__(self):\n        self.clf = make_pipeline(\n            TfidfVectorizer(),\n            RandomForestClassifier(max_depth=26, n_estimators=200, n_jobs=-1),\n        )\n    \n    def fit(self, X, y):\n        self.clf.fit(X, y)\n    \n    def predict(self, X):\n        return self.clf.predict(X)\n\n    def predict_proba(self, X):\n        return self.clf.predict_proba(X)\n"}}, "life": [{"state": "success", "dt": "Sun Feb 25 16:53:56 2018"}], "state": "success", "duration": 204.917848, "problem": "challenges.toxicity.problem"}