{"end": "2018-02-25 14:58:22.105131", "duration": 204.770948, "traceback": "", "sampler": "challenges.toxicity.samplers.tfidf", "summary": "cc5252493e5599dbad1bccea240f010b", "problem": "challenges.toxicity.problem", "life": [{"state": "success", "dt": "Sun Feb 25 14:58:22 2018"}], "start": "2018-02-25 14:54:57.334183", "state": "success", "stats": {"train": {"time": [13.022333860397339, 13.409302473068237, 13.532245874404907, 13.602010488510132, 13.801188707351685], "avg_auc": [0.9978074784019245, 0.9977858125535288, 0.9977637092917213, 0.9977428515268847, 0.9977845917319756]}, "train_full": {"avg_auc": 0.9974259101224111}, "valid": {"time": [9.300830125808716, 9.111717462539673, 9.060040950775146, 9.181158542633057, 9.180075645446777], "avg_auc": [0.962838785406487, 0.9663709115670294, 0.9572667695289026, 0.9619270286442916, 0.9634817516373255]}, "stats": [null, null, null, null, null], "test": {"time": 90.49183177947998, "avg_auc": 0.9721701078604275}}, "content": {"codes": {"classifier": "\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.pipeline import make_pipeline\n\nclass Classifier:\n\n    def __init__(self):\n        self.clf = make_pipeline(\n            TfidfVectorizer(),\n            RandomForestClassifier(max_depth=46, n_estimators=200, n_jobs=-1),\n        )\n    \n    def fit(self, X, y):\n        self.clf.fit(X, y)\n    \n    def predict(self, X):\n        return self.clf.predict(X)\n\n    def predict_proba(self, X):\n        return self.clf.predict_proba(X)\n"}, "problem": "challenges.toxicity.problem", "info": {"n_estimators": 200, "max_depth": 46}, "sampler": "challenges.toxicity.samplers.tfidf"}}