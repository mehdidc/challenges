{"sampler": "challenges.toxicity.samplers.tfidf", "traceback": "", "life": [{"dt": "Sun Feb 25 15:09:54 2018", "state": "success"}], "start": "2018-02-25 15:05:49.268416", "summary": "265c277a2d05fe7f2ad5ab9099190eb4", "end": "2018-02-25 15:09:54.381811", "stats": {"train": {"avg_auc": [0.9996286621067582, 0.9996419259169927, 0.9995805606411583, 0.9995696533243598, 0.9995779851210278], "time": [21.479430198669434, 21.611527681350708, 21.2718563079834, 21.310405731201172, 21.34234309196472]}, "valid": {"avg_auc": [0.9709612321934733, 0.965566723826393, 0.9726860049333887, 0.9718700216131281, 0.9691054687330554], "time": [9.160506963729858, 9.211400032043457, 9.241373062133789, 9.390275478363037, 9.200735092163086]}, "train_full": {"avg_auc": 0.9993860365301624}, "test": {"avg_auc": 0.9727642626112583, "time": 90.81968283653259}, "stats": [null, null, null, null, null]}, "content": {"info": {"max_depth": 81, "n_estimators": 200}, "codes": {"classifier": "\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.pipeline import make_pipeline\n\nclass Classifier:\n\n    def __init__(self):\n        self.clf = make_pipeline(\n            TfidfVectorizer(),\n            RandomForestClassifier(max_depth=81, n_estimators=200, n_jobs=-1),\n        )\n    \n    def fit(self, X, y):\n        self.clf.fit(X, y)\n    \n    def predict(self, X):\n        return self.clf.predict(X)\n\n    def predict_proba(self, X):\n        return self.clf.predict_proba(X)\n"}, "sampler": "challenges.toxicity.samplers.tfidf", "problem": "challenges.toxicity.problem"}, "duration": 245.113395, "state": "success", "problem": "challenges.toxicity.problem"}