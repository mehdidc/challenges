{"stats": {"train": {"time": [8.7612624168396, 8.891186237335205, 8.819187879562378, 8.942713022232056, 8.783387422561646], "avg_auc": [0.9889925333507997, 0.9888803272961071, 0.9886979465168402, 0.9886080972537353, 0.988536024353325]}, "stats": [null, null, null, null, null], "train_full": {"avg_auc": 0.9899219848304824}, "test": {"avg_auc": 0.9650070624876493, "time": 91.08878302574158}, "valid": {"avg_auc": [0.9626524538983517, 0.9562654521220776, 0.9625188352598936, 0.9476886764474018, 0.9600344823125231], "time": [9.078668117523193, 9.209800481796265, 9.311264276504517, 9.179746389389038, 9.14000916481018]}}, "traceback": "", "content": {"codes": {"classifier": "\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.ensemble import RandomForestClassifier\nfrom sklearn.pipeline import make_pipeline\n\nclass Classifier:\n\n    def __init__(self):\n        self.clf = make_pipeline(\n            TfidfVectorizer(),\n            RandomForestClassifier(max_depth=20, n_estimators=200, n_jobs=-1),\n        )\n    \n    def fit(self, X, y):\n        self.clf.fit(X, y)\n    \n    def predict(self, X):\n        return self.clf.predict(X)\n\n    def predict_proba(self, X):\n        return self.clf.predict_proba(X)\n"}, "info": {"max_depth": 20, "n_estimators": 200}, "problem": "challenges.toxicity.problem", "sampler": "challenges.toxicity.samplers.tfidf"}, "summary": "901edf4aabb66b040c1099c7c4ac260b", "sampler": "challenges.toxicity.samplers.tfidf", "problem": "challenges.toxicity.problem", "end": "2018-02-25 16:23:55.172238", "duration": 182.285448, "state": "success", "life": [{"dt": "Sun Feb 25 16:23:55 2018", "state": "success"}], "start": "2018-02-25 16:20:52.886790"}